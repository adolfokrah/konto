name: 'Trigger Codemagic Build'
description: 'Triggers a Codemagic build and waits for completion'
inputs:
  codemagic-api-token:
    description: 'Codemagic API token'
    required: true
  codemagic-app-id:
    description: 'Codemagic App ID'
    required: true
  workflow-id:
    description: 'Codemagic workflow ID'
    required: true
  environment:
    description: 'Build environment (staging/production)'
    required: true
    default: 'staging'
  custom-message:
    description: 'Custom message for the build'
    required: false
    default: 'Build triggered'
  branch:
    description: 'Git branch to build'
    required: false
    default: 'main'
  api-base-url:
    description: 'API base URL for the environment'
    required: false
  mnotify-api-key:
    description: 'MNotify API key'
    required: false
  mnotify-sender-id:
    description: 'MNotify sender ID'
    required: false
  mnotify-api-base-url:
    description: 'MNotify API base URL'
    required: false
outputs:
  build-id:
    description: 'Codemagic build ID'
    value: ${{ steps.trigger-build.outputs.build_id }}
  build-url:
    description: 'Codemagic build URL'
    value: ${{ steps.trigger-build.outputs.build_url }}
  build-status:
    description: 'Final build status'
    value: ${{ steps.monitor-build.outputs.build_status }}

runs:
  using: 'composite'
  steps:
    - name: Trigger Codemagic Build
      id: trigger-build
      shell: bash
      run: |
        echo "🚀 Triggering Codemagic build for ${{ inputs.environment }} environment..."
        
        response=$(curl -s -X POST \
        -H "Content-Type: application/json" \
        -H "x-auth-token: ${{ inputs.codemagic-api-token }}" \
        -d '{
          "appId": "${{ inputs.codemagic-app-id }}",
          "workflowId": "${{ inputs.workflow-id }}",
          "branch": "${{ inputs.branch }}",
          "environment": {
            "variables": {
              "CUSTOM_MESSAGE": "${{ inputs.custom-message }}",
              "BUILD_ENV": "${{ inputs.environment }}",
              "apiBaseUrl": "${{ inputs.api-base-url }}",
              "MNOTIFY_API_KEY": "${{ inputs.mnotify-api-key }}",
              "MNOTIFY_SENDER_ID": "${{ inputs.mnotify-sender-id }}",
              "MNOTIFY_API_BASE_URL": "${{ inputs.mnotify-api-base-url }}"
            }
          }
        }' \
        https://api.codemagic.io/builds)
        
        echo "API Response: $response"
        
        # Extract build ID from response
        build_id=$(echo $response | grep -o '"buildId":"[^"]*"' | cut -d'"' -f4)
        
        if [ -z "$build_id" ]; then
          echo "❌ Failed to get build ID from response"
          exit 1
        fi
        
        build_url="https://codemagic.io/builds/$build_id"
        
        echo "✅ Build triggered successfully!"
        echo "📱 Build ID: $build_id"
        echo "🔗 Build URL: $build_url"
        
        echo "build_id=$build_id" >> $GITHUB_OUTPUT
        echo "build_url=$build_url" >> $GITHUB_OUTPUT

    - name: Monitor Codemagic Build
      id: monitor-build
      shell: bash
      run: |
        build_id="${{ steps.trigger-build.outputs.build_id }}"
        build_url="${{ steps.trigger-build.outputs.build_url }}"
        
        echo "🔄 Monitoring Codemagic build: $build_id"
        echo "📱 Build URL: $build_url"
        echo "🏗️ Environment: ${{ inputs.environment }}"
        
        max_wait_time=3600  # 1 hour max wait time
        check_interval=30   # Check every 30 seconds
        elapsed_time=0
        
        while [ $elapsed_time -lt $max_wait_time ]; do
          echo "⏱️  Checking build status... (${elapsed_time}s elapsed)"
          
          # Get build details from the correct endpoint
          status_response=$(curl -s \
            -H "Content-Type: application/json" \
            -H "x-auth-token: ${{ inputs.codemagic-api-token }}" \
            "https://api.codemagic.io/builds/$build_id")
          
          # Check if response contains build data or if we need to use a different endpoint
          if echo "$status_response" | grep -q '"application":'; then
            echo "� Getting build status from builds endpoint..."
            status_response=$(curl -s \
              -H "Content-Type: application/json" \
              -H "x-auth-token: ${{ inputs.codemagic-api-token }}" \
              "https://api.codemagic.io/builds")
            
            # Extract our specific build from the list
            build_info=$(echo "$status_response" | grep -A 500 "\"_id\":\"$build_id\"" | grep -B 500 -m 1 "\"_id\":\"" | head -n -1)
            status=$(echo "$build_info" | grep -o '"status":"[^"]*"' | cut -d'"' -f4)
          else
            # Extract status from direct build response
            status=$(echo "$status_response" | grep -o '"status":"[^"]*"' | cut -d'"' -f4)
          fi
          
          # Debug logging (truncated to avoid too much output)
          echo "🔍 Response preview: $(echo "$status_response" | head -c 200)..."
          echo "📊 Current build status: '$status'"
          
          case $status in
            "finished"|"success"|"successful"|"completed")
              echo "✅ Build completed successfully!"
              echo "🎉 ${{ inputs.environment }} build finished - marking as PASSED"
              echo "📱 View build details: $build_url"
              echo "build_status=success" >> $GITHUB_OUTPUT
              exit 0
              ;;
            "failed"|"failure"|"error")
              echo "❌ Build failed"
              echo "🔗 Check build logs: $build_url"
              echo "build_status=failed" >> $GITHUB_OUTPUT
              exit 1
              ;;
            "canceled"|"cancelled"|"aborted")
              echo "⏹️  Build was canceled"
              echo "🔗 Check build details: $build_url"
              echo "build_status=canceled" >> $GITHUB_OUTPUT
              exit 1
              ;;
            "timeout"|"timed_out")
              echo "⏰ Build timed out"
              echo "🔗 Check build details: $build_url"
              echo "build_status=timeout" >> $GITHUB_OUTPUT
              exit 1
              ;;
            "building"|"queued"|"preparing"|"testing"|"publishing"|"fetching"|"finishing"|"starting"|"pending")
              echo "🔄 Build in progress: $status"
              ;;
            "")
              echo "⚠️  Could not get build status - API response might be malformed"
              echo "Raw response: $status_response"
              ;;
            *)
              echo "⚠️  Unknown status: '$status' - assuming build is still in progress"
              echo "Raw response: $status_response"
              ;;
          esac
          
          sleep $check_interval
          elapsed_time=$((elapsed_time + check_interval))
        done
        
        echo "❌ Build monitoring timed out after ${max_wait_time} seconds"
        echo "🔗 Check build status manually: $build_url"
        echo "build_status=timeout" >> $GITHUB_OUTPUT
        exit 1

    - name: Build Success Summary
      if: success()
      shell: bash
      run: |
        build_id="${{ steps.trigger-build.outputs.build_id }}"
        build_url="${{ steps.trigger-build.outputs.build_url }}"
        
        echo "🎊 SUCCESS: ${{ inputs.environment }} build completed successfully!"
        echo "📱 Build ID: $build_id"
        echo "🔗 View artifacts: $build_url"
        echo "✅ GitHub Action marked as PASSED"
