name: Mobile App Deploy

on:
  push:
    branches:
      - main
    paths:
      - 'mobile_app/**'
      - '.github/workflows/mobile-deploy.yml'
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy Mobile App to Shorebird
    runs-on: ubuntu-latest
    
    env:
      FLUTTER_CHANNEL: 'stable'
      SHOREBIRD_PATH: $HOME/.shorebird/bin
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - name: Disable Flutter analytics
        run: flutter config --no-analytics

      - name: Install Shorebird CLI
        run: |
          # Download and install Shorebird CLI
          curl --proto '=https' --tlsv1.2 https://raw.githubusercontent.com/shorebirdtech/install/main/install.sh -sSf | bash
          
          # Add to PATH for this session
          echo "$HOME/.shorebird/bin" >> $GITHUB_PATH
          
          # Source the environment to make sure PATH is updated
          export PATH="$HOME/.shorebird/bin:$PATH"
          
          # Verify installation immediately
          "$HOME/.shorebird/bin/shorebird" --version
          
          # Also verify dart and flutter are available
          which dart && dart --version
          which flutter && flutter --version
          
      - name: Verify Shorebird installation
        run: |
          # Verify Shorebird is in PATH
          echo "Checking if shorebird is in PATH..."
          if command -v shorebird >/dev/null 2>&1; then
            echo "✅ Shorebird found in PATH"
            shorebird --version
          else
            echo "⚠️ Shorebird not in PATH, using direct path"
            "$HOME/.shorebird/bin/shorebird" --version
          fi

      - name: Get commit message and determine update type
        id: commit_info
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          echo "commit_message=$COMMIT_MSG" >> $GITHUB_OUTPUT
          
          if [[ "$COMMIT_MSG" =~ ^feat: ]]; then
            echo "update_type=minor" >> $GITHUB_OUTPUT
            echo "deploy_type=release" >> $GITHUB_OUTPUT
          elif [[ "$COMMIT_MSG" =~ ^fix: ]]; then
            echo "update_type=patch" >> $GITHUB_OUTPUT
            echo "deploy_type=patch" >> $GITHUB_OUTPUT
          elif [[ "$COMMIT_MSG" =~ ^major: ]]; then
            echo "update_type=major" >> $GITHUB_OUTPUT
            echo "deploy_type=release" >> $GITHUB_OUTPUT
          else
            echo "update_type=none" >> $GITHUB_OUTPUT
            echo "deploy_type=none" >> $GITHUB_OUTPUT
          fi

      - name: Get current version
        id: current_version
        working-directory: ./mobile_app
        run: |
          CURRENT_VERSION=$(grep "^version:" pubspec.yaml | cut -d' ' -f2)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Calculate new version
        id: new_version
        if: steps.commit_info.outputs.update_type != 'none'
        run: |
          CURRENT="${{ steps.current_version.outputs.current_version }}"
          UPDATE_TYPE="${{ steps.commit_info.outputs.update_type }}"
          
          # Parse current version (format: x.y.z)
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # Calculate new version based on update type
          case $UPDATE_TYPE in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION (from $CURRENT, type: $UPDATE_TYPE)"

      - name: Update version in pubspec.yaml
        if: steps.commit_info.outputs.update_type != 'none'
        working-directory: ./mobile_app
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          sed -i "s/^version: .*/version: $NEW_VERSION/" pubspec.yaml
          echo "Updated pubspec.yaml version to: $NEW_VERSION"

      - name: Configure git
        if: steps.commit_info.outputs.update_type != 'none'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Commit version update
        if: steps.commit_info.outputs.update_type != 'none'
        run: |
          git add mobile_app/pubspec.yaml
          git commit -m "chore: bump version to ${{ steps.new_version.outputs.new_version }}"
          git push

      - name: Get Flutter dependencies
        working-directory: ./mobile_app
        run: flutter pub get

      - name: Run tests
        working-directory: ./mobile_app
        run: flutter test

      - name: Build Android APK
        working-directory: ./mobile_app
        run: flutter build apk --release

      - name: Login to Shorebird
        env:
          SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}
        run: |
          # Try using shorebird from PATH, fallback to direct path
          if command -v shorebird >/dev/null 2>&1; then
            shorebird login --token "$SHOREBIRD_TOKEN"
          else
            "$HOME/.shorebird/bin/shorebird" login --token "$SHOREBIRD_TOKEN"
          fi

      - name: Create Shorebird Release (for major/feat updates)
        if: steps.commit_info.outputs.deploy_type == 'release'
        working-directory: ./mobile_app
        run: |
          # Try using shorebird from PATH, fallback to direct path
          if command -v shorebird >/dev/null 2>&1; then
            shorebird release android --force
          else
            "$HOME/.shorebird/bin/shorebird" release android --force
          fi
          echo "Created new Shorebird release for version ${{ steps.new_version.outputs.new_version }}"

      - name: Create Shorebird Patch (for fix updates)
        if: steps.commit_info.outputs.deploy_type == 'patch'
        working-directory: ./mobile_app
        run: |
          # Try using shorebird from PATH, fallback to direct path
          if command -v shorebird >/dev/null 2>&1; then
            shorebird patch android --force
          else
            "$HOME/.shorebird/bin/shorebird" patch android --force
          fi
          echo "Created Shorebird patch for version ${{ steps.new_version.outputs.new_version }}"

      - name: Create GitHub Release
        if: steps.commit_info.outputs.deploy_type == 'release'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: mobile-v${{ steps.new_version.outputs.new_version }}
          release_name: Mobile App v${{ steps.new_version.outputs.new_version }}
          body: |
            Mobile app release v${{ steps.new_version.outputs.new_version }}
            
            **Changes:**
            ${{ steps.commit_info.outputs.commit_message }}
            
            **Update Type:** ${{ steps.commit_info.outputs.update_type }}
          draft: false
          prerelease: false

      - name: Deployment Summary
        if: steps.commit_info.outputs.update_type != 'none'
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit Message:** ${{ steps.commit_info.outputs.commit_message }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Update Type:** ${{ steps.commit_info.outputs.update_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deploy Type:** ${{ steps.commit_info.outputs.deploy_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Previous Version:** ${{ steps.current_version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **New Version:** ${{ steps.new_version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Shorebird App ID:** $(grep app_id mobile_app/shorebird.yaml | cut -d' ' -f2)" >> $GITHUB_STEP_SUMMARY

      - name: Skip Deployment
        if: steps.commit_info.outputs.update_type == 'none'
        run: |
          echo "## Deployment Skipped" >> $GITHUB_STEP_SUMMARY
          echo "Commit message does not match deployment patterns (feat:, fix:, major:)" >> $GITHUB_STEP_SUMMARY
          echo "**Commit Message:** ${{ steps.commit_info.outputs.commit_message }}" >> $GITHUB_STEP_SUMMARY
