name: Automated Dependency Updates (Monorepo)

on:
  push:
    branches: [ main ]
    # Run after code is pushed to main branch
  schedule:
    # Run dependency checks daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
    # Allow manual triggering
    inputs:
      update_type:
        description: 'Type of update to run'
        required: true
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'patch'
          - 'minor'
          - 'major'

permissions:
  contents: write
  pull-requests: write

jobs:
  check-dependencies:
    runs-on: ubuntu-latest
    outputs:
      has-updates: ${{ steps.check.outputs.has-updates }}
      update-type: ${{ steps.check.outputs.update-type }}
      workspaces-with-updates: ${{ steps.check.outputs.workspaces-with-updates }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Check for outdated dependencies
        id: check
        run: |
          echo "Checking for outdated dependencies in monorepo..."

          # Check each workspace for outdated dependencies
          has_updates=false
          update_types=""

          # Check root workspace
          echo "Checking root workspace..."
          root_outdated=$(pnpm outdated --format json 2>/dev/null || echo '{}')
          if [ "$root_outdated" != "{}" ] && [ -n "$root_outdated" ]; then
            has_updates=true
            update_types="$update_types root"
          fi

          # Check CMS workspace
          echo "Checking CMS workspace..."
          cms_outdated=$(pnpm --filter @konto/cms outdated --format json 2>/dev/null || echo '{}')
          if [ "$cms_outdated" != "{}" ] && [ -n "$cms_outdated" ]; then
            has_updates=true
            update_types="$update_types cms"
          fi

          # Check mobile-app workspace  
          echo "Checking mobile-app workspace..."
          mobile_outdated=$(pnpm --filter mobile-app outdated --format json 2>/dev/null || echo '{}')
          if [ "$mobile_outdated" != "{}" ] && [ -n "$mobile_outdated" ]; then
            has_updates=true
            update_types="$update_types mobile"
          fi

          # Check shared packages
          echo "Checking shared packages..."
          shared_outdated=$(pnpm --filter "@konto/shared-*" outdated --format json 2>/dev/null || echo '{}')
          if [ "$shared_outdated" != "{}" ] && [ -n "$shared_outdated" ]; then
            has_updates=true
            update_types="$update_types shared"
          fi

          if [ "$has_updates" = "false" ]; then
            echo "No outdated dependencies found in any workspace"
            echo "has-updates=false" >> $GITHUB_OUTPUT
            echo "update-type=none" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "has-updates=true" >> $GITHUB_OUTPUT
          echo "workspaces-with-updates=$update_types" >> $GITHUB_OUTPUT

          # Determine update type based on all outdated packages
          all_outdated="$root_outdated $cms_outdated $mobile_outdated $shared_outdated"
          if echo "$all_outdated" | grep -q "major"; then
            echo "update-type=major" >> $GITHUB_OUTPUT
            echo "Major updates detected across workspaces"
          elif echo "$all_outdated" | grep -q "minor"; then
            echo "update-type=minor" >> $GITHUB_OUTPUT
            echo "Minor updates detected across workspaces"
          else
            echo "update-type=patch" >> $GITHUB_OUTPUT
            echo "Patch updates detected across workspaces"
          fi

  update-patch-dependencies:
    needs: check-dependencies
    runs-on: ubuntu-latest
    if: needs.check-dependencies.outputs.has-updates == 'true' && needs.check-dependencies.outputs.update-type == 'patch'

    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_DATABASE: konto-test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      NODE_ENV: test
      PAYLOAD_SECRET: ${{ secrets.PAYLOAD_SECRET }}
      DATABASE_URI_TEST: mongodb://localhost:27017/konto-test
      NODE_OPTIONS: '--no-deprecation --max-old-space-size=4096'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Update patch dependencies
        id: update
        run: |
          echo "Updating patch-level dependencies across monorepo..."

          # Create branch
          branch_name="dependency/patch-updates-$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$branch_name"
          echo "branch-name=$branch_name" >> $GITHUB_OUTPUT

          # Update dependencies in all workspaces
          echo "Updating root dependencies..."
          pnpm update --latest --save-exact

          echo "Updating CMS dependencies..."
          pnpm --filter @konto/cms update --latest --save-exact

          echo "Updating mobile-app dependencies..."
          pnpm --filter mobile-app update --latest --save-exact

          echo "Updating shared packages dependencies..."
          pnpm --filter "@konto/shared-*" update --latest --save-exact

          # Check if there are changes
          if git diff --quiet; then
            echo "No changes to commit"
            echo "changes-made=false" >> $GITHUB_OUTPUT
          else
            echo "changes-made=true" >> $GITHUB_OUTPUT
            
            # Install and verify builds
            pnpm install --frozen-lockfile
            pnpm --filter @konto/cms generate:types
            
            # Ensure all workspaces build successfully
            echo "Building all workspaces..."
            
            # Build CMS first
            echo "Building CMS..."
            pnpm --filter @konto/cms build
            
            # Build shared packages
            echo "Building shared packages..."
            pnpm --filter "@konto/shared-*" build
            
            # Skip mobile app build in CI for patch updates (Hermes issues)
            echo "Skipping mobile app build for patch updates (CI environment limitations)"
            
            # Run integration tests
            pnpm --filter @konto/cms test:int
            
            # Commit and push
            git add .
            git commit -m "dependency: update patch-level dependencies across monorepo [auto-merge]"
            git push origin "$branch_name"
          fi

      - name: Create Pull Request (Auto-merge)
        if: steps.update.outputs.changes-made == 'true'
        run: |
          # Create labels if they don't exist
          gh label create "dependencies" --description "Pull requests that update dependencies" --color "0366d6" --force || true
          gh label create "patch-update" --description "Patch-level dependency updates" --color "28a745" --force || true
          gh label create "auto-merge" --description "PRs that will be automatically merged" --color "fbca04" --force || true

          # Create PR
          gh pr create \
            --title "🔧 Automated patch dependency updates (Monorepo)" \
            --body "## 🔧 Automated Patch Dependency Updates

          This PR contains patch-level dependency updates across the entire monorepo that are considered safe and will be automatically merged after tests pass.

          ### Workspaces Updated
          ${{ needs.check-dependencies.outputs.workspaces-with-updates }}

          ### Changes Made
          - ✅ Updated patch-level dependencies in all workspaces
          - ✅ CMS and shared packages build successfully
          - ⚠️ Mobile app build skipped (CI environment limitations)
          - ✅ Tests passed successfully
          - ✅ No breaking changes expected

          ### Auto-merge Policy
          This PR will be automatically merged because:
          - Only patch-level updates (bug fixes)
          - Tests are passing
          - Low risk of breaking changes

          ---
          *This is an automated PR created by the dependency update workflow*" \
            --label "dependencies,patch-update,auto-merge" \
            --assignee "${{ github.actor }}" \
            --head "${{ steps.update.outputs.branch-name }}" \
            --base main
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Enable auto-merge
        if: steps.update.outputs.changes-made == 'true'
        run: |
          gh pr merge "${{ steps.update.outputs.branch-name }}" --auto --squash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-major-minor-dependencies:
    needs: check-dependencies
    runs-on: ubuntu-latest
    if: needs.check-dependencies.outputs.has-updates == 'true' && (needs.check-dependencies.outputs.update-type == 'major' || needs.check-dependencies.outputs.update-type == 'minor')

    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_DATABASE: konto-test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      NODE_ENV: test
      PAYLOAD_SECRET: ${{ secrets.PAYLOAD_SECRET }}
      DATABASE_URI_TEST: mongodb://localhost:27017/konto-test
      NODE_OPTIONS: '--no-deprecation --max-old-space-size=4096'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Update dependencies
        id: update
        run: |
          update_type="${{ needs.check-dependencies.outputs.update-type }}"
          echo "Updating $update_type dependencies across monorepo..."

          # Create branch
          branch_name="dependency/${update_type}-updates-$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$branch_name"
          echo "branch-name=$branch_name" >> $GITHUB_OUTPUT
          echo "update-type=$update_type" >> $GITHUB_OUTPUT

          # Update dependencies in all workspaces
          echo "Updating root dependencies..."
          pnpm update --latest

          echo "Updating CMS dependencies..."
          pnpm --filter @konto/cms update --latest

          echo "Updating mobile-app dependencies..."
          pnpm --filter mobile-app update --latest

          echo "Updating shared packages dependencies..."
          pnpm --filter "@konto/shared-*" update --latest

          # Check if there are changes
          if git diff --quiet; then
            echo "changes-made=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "changes-made=true" >> $GITHUB_OUTPUT

          # Install and verify builds
          pnpm install --frozen-lockfile
          pnpm --filter @konto/cms generate:types

          # Test builds before running tests
          echo "Building workspaces to verify compatibility..."
          
          # Build CMS
          echo "Building CMS..."
          if pnpm --filter @konto/cms build; then
            echo "CMS build successful"
          else
            echo "builds-passing=false" >> $GITHUB_OUTPUT
            echo "❌ CMS build failed after dependency updates"
            exit 1
          fi
          
          # Build shared packages
          echo "Building shared packages..."
          if pnpm --filter "@konto/shared-*" build; then
            echo "Shared packages build successful"
          else
            echo "builds-passing=false" >> $GITHUB_OUTPUT
            echo "❌ Shared packages build failed after dependency updates"
            exit 1
          fi
          
          # Try mobile app build (don't fail if Hermes issues in CI)
          echo "Attempting mobile app build..."
          if pnpm --filter mobile-app build; then
            echo "Mobile app build successful"
            echo "builds-passing=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Mobile app build failed (likely Hermes/CI issue) - manual verification needed"
            echo "builds-passing=partial" >> $GITHUB_OUTPUT
          fi

          # Test (don't fail if tests break)
          if pnpm --filter @konto/cms test:int; then
            echo "tests-passing=true" >> $GITHUB_OUTPUT
          else
            echo "tests-passing=false" >> $GITHUB_OUTPUT
          fi

          # Commit and push
          git add .
          git commit -m "dependency: update $update_type dependencies across monorepo

          This commit updates $update_type-level dependencies in all workspaces.
          Manual review and approval required before merging."
          git push origin "$branch_name"

      - name: Create Pull Request (Manual Review)
        if: steps.update.outputs.changes-made == 'true'
        run: |
          # Create labels if they don't exist
          gh label create "dependencies" --description "Pull requests that update dependencies" --color "0366d6" --force || true
          gh label create "${{ steps.update.outputs.update-type }}-update" --description "${{ steps.update.outputs.update-type }}-level dependency updates" --color "d73a49" --force || true
          gh label create "review-required" --description "PRs that require manual review" --color "e99695" --force || true

          # Create PR
          gh pr create \
            --title "🔄 ${{ steps.update.outputs.update-type }} dependency updates (Monorepo - Review Required)" \
            --body "## 📦 ${{ steps.update.outputs.update-type }} Dependency Updates

          This PR contains **${{ steps.update.outputs.update-type }}** dependency updates across the monorepo that require careful review.

          ### Workspaces Updated
          Multiple workspaces in the monorepo have been updated with ${{ steps.update.outputs.update-type }}-level dependency changes.

          ### Update Details
          - **Type**: ${{ steps.update.outputs.update-type }} updates
          - **Builds**: ${{ steps.update.outputs.builds-passing == 'true' && '✅ All Passing' || steps.update.outputs.builds-passing == 'partial' && '⚠️ Partial (Mobile app needs manual verification)' || '❌ Failing - needs attention' }}
          - **Tests**: ${{ steps.update.outputs.tests-passing == 'true' && '✅ Passing' || '❌ Failing - needs attention' }}
          - **Risk Level**: ${{ steps.update.outputs.update-type == 'major' && 'High' || 'Medium' }}

          ### ⚠️ Manual Review Required

          This PR will **NOT** be automatically merged and requires manual approval because:
          - Contains ${{ steps.update.outputs.update-type }}-level updates across multiple workspaces
          - Potential for breaking changes
          - Manual testing recommended

          ### Review Checklist
          - [ ] Review changelog/release notes for updated packages
          - [ ] Verify CMS builds successfully locally
          - [ ] **Verify mobile app builds locally** (CI Hermes limitation)
          - [ ] Test the CMS application locally
          - [ ] Test the mobile app locally  
          - [ ] Verify no breaking changes in shared packages
          - [ ] Check for deprecated features usage
          - [ ] Ensure all tests pass

          ### Changes Made
          - Updated ${{ steps.update.outputs.update-type }}-level dependencies across monorepo
          - Dependencies locked to specific versions
          - Builds ${{ steps.update.outputs.builds-passing == 'true' && 'are passing' || steps.update.outputs.builds-passing == 'partial' && 'partially passing (mobile app needs manual verification)' || 'need attention' }}
          - Tests ${{ steps.update.outputs.tests-passing == 'true' && 'are passing' || 'need attention' }}

          ---
          *This is an automated PR created by the dependency update workflow*" \
            --label "dependencies,${{ steps.update.outputs.update-type }}-update,review-required" \
            --assignee "${{ github.actor }}" \
            --head "${{ steps.update.outputs.branch-name }}" \
            --base main
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    needs: [check-dependencies, update-patch-dependencies, update-major-minor-dependencies]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Workflow Summary
        run: |
          echo "## 📊 Dependency Update Workflow Summary"
          echo ""
          echo "- **Has Updates**: ${{ needs.check-dependencies.outputs.has-updates }}"
          echo "- **Update Type**: ${{ needs.check-dependencies.outputs.update-type }}"
          echo "- **Workspaces**: ${{ needs.check-dependencies.outputs.workspaces-with-updates }}"
          echo ""
          if [ "${{ needs.check-dependencies.outputs.update-type }}" = "patch" ]; then
            echo "✅ Patch updates were processed and auto-merged"
          elif [ "${{ needs.check-dependencies.outputs.update-type }}" != "none" ]; then
            echo "📋 ${{ needs.check-dependencies.outputs.update-type }} updates created PR for manual review"
          else
            echo "ℹ️ No dependency updates available"
          fi
          
          echo ""
          echo "### Job Status:"
          echo "- **Dependency Check**: ${{ needs.check-dependencies.result }}"
          if [ "${{ needs.update-patch-dependencies.result }}" != "skipped" ]; then
            echo "- **Patch Updates**: ${{ needs.update-patch-dependencies.result }}"
          fi
          if [ "${{ needs.update-major-minor-dependencies.result }}" != "skipped" ]; then
            echo "- **Major/Minor Updates**: ${{ needs.update-major-minor-dependencies.result }}"
          fi
