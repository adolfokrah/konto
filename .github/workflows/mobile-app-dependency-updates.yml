name: Automated Dependency Updates In Mobile App

on:
  schedule:
    # Run dependency checks daily at 4 AM UTC (1 hour after CMS)
    - cron: '0 4 * * *'
  workflow_dispatch:
    # Allow manual triggering
    inputs:
      update_type:
        description: 'Type of update to run'
        required: true
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'patch'
          - 'minor'
          - 'major'

permissions:
  contents: write
  pull-requests: write

jobs:
  check-dependencies:
    runs-on: ubuntu-latest
    outputs:
      has-updates: ${{ steps.check.outputs.has-updates }}
      update-type: ${{ steps.check.outputs.update-type }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Check for outdated dependencies
        id: check
        working-directory: ./mobile-app
        run: |
          echo "Checking for outdated dependencies in mobile-app folder..."

          # Get outdated packages
          outdated_output=$(pnpm outdated --format json 2>/dev/null || echo "[]")
          echo "Outdated output: $outdated_output"

          # Check if there are any outdated packages
          if [ "$outdated_output" = "[]" ] || [ -z "$outdated_output" ]; then
            echo "No outdated dependencies found"
            echo "has-updates=false" >> $GITHUB_OUTPUT
            echo "update-type=none" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Parse the outdated packages and categorize updates
          patch_count=0
          minor_count=0
          major_count=0

          echo "$outdated_output" | jq -r '.[] | select(.current != null and .wanted != null and .latest != null) | "\(.current),\(.wanted),\(.latest)"' | while IFS=',' read -r current wanted latest; do
            if [ "$current" != "$wanted" ]; then
              if [[ "$wanted" =~ ^[0-9]+\.[0-9]+\.([0-9]+)$ ]] && [[ "$current" =~ ^[0-9]+\.[0-9]+\.([0-9]+)$ ]]; then
                patch_count=$((patch_count + 1))
              elif [[ "$wanted" =~ ^[0-9]+\.([0-9]+)\.[0-9]+$ ]] && [[ "$current" =~ ^[0-9]+\.([0-9]+)\.[0-9]+$ ]]; then
                minor_count=$((minor_count + 1))
              else
                major_count=$((major_count + 1))
              fi
            fi
          done

          # Determine update type based on input or available updates
          update_type="${{ github.event.inputs.update_type || 'all' }}"
          
          if [ "$update_type" = "all" ]; then
            if [ $major_count -gt 0 ]; then
              update_type="major"
            elif [ $minor_count -gt 0 ]; then
              update_type="minor"
            else
              update_type="patch"
            fi
          fi

          echo "Found updates - Patch: $patch_count, Minor: $minor_count, Major: $major_count"
          echo "Selected update type: $update_type"
          echo "has-updates=true" >> $GITHUB_OUTPUT
          echo "update-type=$update_type" >> $GITHUB_OUTPUT

  update-dependencies:
    needs: check-dependencies
    if: needs.check-dependencies.outputs.has-updates == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Install current dependencies
        working-directory: ./mobile-app
        run: pnpm install

      - name: Update dependencies
        working-directory: ./mobile-app
        run: |
          update_type="${{ needs.check-dependencies.outputs.update-type }}"
          echo "Running $update_type updates for mobile app dependencies..."

          case $update_type in
            "patch")
              echo "Updating patch versions only..."
              pnpm update --latest --depth 0 --workspace-root=false
              ;;
            "minor")
              echo "Updating minor and patch versions..."
              pnpm update --latest --depth 1 --workspace-root=false
              ;;
            "major"|"all")
              echo "Updating all dependencies to latest versions..."
              pnpm update --latest --workspace-root=false
              ;;
          esac

      - name: Check for changes
        id: changes
        working-directory: ./mobile-app
        run: |
          if git diff --quiet package.json; then
            echo "No changes detected in package.json"
            echo "has-changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in package.json"
            echo "has-changes=true" >> $GITHUB_OUTPUT
            
            # Get the list of updated packages
            git diff package.json | grep -E '^[+-]' | grep -v '^[+-]{3}' | head -20 || true
          fi

      - name: Create Pull Request
        if: steps.changes.outputs.has-changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            chore(mobile-app): update dependencies (${{ needs.check-dependencies.outputs.update-type }})
            
            Automated dependency update for mobile app
            Update type: ${{ needs.check-dependencies.outputs.update-type }}
          title: '🔄 Mobile App: Update dependencies (${{ needs.check-dependencies.outputs.update-type }})'
          body: |
            ## 📱 Mobile App Dependency Updates

            This PR contains automated dependency updates for the mobile app.

            **Update Type:** `${{ needs.check-dependencies.outputs.update-type }}`
            **Triggered:** ${{ github.event_name == 'schedule' && 'Scheduled (daily)' || 'Manual' }}

            ### 📋 Changes
            - Updated dependencies to their latest compatible versions
            - React Native and Expo dependencies handled carefully
            - Development dependencies updated

            ### 🧪 Testing
            Please verify that:
            - [ ] Mobile app builds successfully
            - [ ] No breaking changes in React Native/Expo
            - [ ] Core functionality works as expected
            - [ ] No new warnings or errors

            ### 🚀 Deployment
            This PR can be merged after:
            - [ ] Mobile app tests pass
            - [ ] Manual testing confirms functionality
            - [ ] No conflicts with current development

            ---
            *This PR was automatically created by the dependency update workflow*
          branch: mobile-app/dependency-updates-${{ needs.check-dependencies.outputs.update-type }}-${{ github.run_number }}
          base: main
          delete-branch: true
          labels: |
            dependencies
            mobile-app
            automated
            ${{ needs.check-dependencies.outputs.update-type }}-update

      - name: Summary
        run: |
          echo "## 📱 Mobile App Dependency Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Update Type:** ${{ needs.check-dependencies.outputs.update-type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Changes:** ${{ steps.changes.outputs.has-changes == 'true' && 'PR created' || 'No changes needed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY

  notify-completion:
    needs: [check-dependencies, update-dependencies]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Workflow Summary
        run: |
          echo "🏁 Mobile App Dependency Update Workflow Complete"
          echo "Status: ${{ needs.update-dependencies.result || 'skipped' }}"
          echo "Updates Available: ${{ needs.check-dependencies.outputs.has-updates }}"
          echo "Update Type: ${{ needs.check-dependencies.outputs.update-type }}"
