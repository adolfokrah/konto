name: Deploy

on:
  repository_dispatch:
    types: [version-updated]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: false
        type: string
      tag:
        description: 'Git tag to deploy'
        required: false
        type: string

permissions:
  contents: read

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    environment:
      name: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.client_payload.tag || github.event.inputs.tag || 'main' }}

      - name: Deploy Info
        run: |
          echo "üöÄ Deploying to staging..."
          if [ -n "${{ github.event.client_payload.version }}" ]; then
            echo "üì¶ Version: ${{ github.event.client_payload.version }}"
            echo "üè∑Ô∏è Tag: ${{ github.event.client_payload.tag }}"
          elif [ -n "${{ github.event.inputs.version }}" ]; then
            echo "üì¶ Version: ${{ github.event.inputs.version }}"
            echo "üè∑Ô∏è Tag: ${{ github.event.inputs.tag }}"
          else
            echo "üì¶ Deploying from main branch"
          fi

      - name: Deploy to Vercel Staging
        id: deploy-staging
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          vercel-args: '--target=staging'

  deploy-mobile-staging:
    runs-on: ubuntu-latest
    environment:
      name: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.client_payload.tag || github.event.inputs.tag || 'main' }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Install dependencies
        run: |
          cd mobile-app
          pnpm install

      - name: Setup Expo CLI
        run: npm install -g @expo/cli

      - name: Setup EAS CLI
        run: npm install -g eas-cli

      - name: Authenticate with Expo
        run: |
          cd mobile-app
          expo login --non-interactive
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Build and Submit to App Stores (Preview)
        run: |
          cd mobile-app
          echo "üöÄ Building mobile app for staging..."
          
          # Update app version to match release
          if [ -n "${{ github.event.client_payload.version }}" ]; then
            version="${{ github.event.client_payload.version }}"
            echo "üì± Setting mobile app version to: $version"
            
            # Update version in app.json/app.config.js
            node -e "
              const fs = require('fs');
              const appConfig = JSON.parse(fs.readFileSync('app.json', 'utf8'));
              appConfig.expo.version = '$version';
              // Increment build number based on version
              const versionParts = '$version'.split('.');
              const buildNumber = (parseInt(versionParts[0]) * 10000 + parseInt(versionParts[1]) * 100 + parseInt(versionParts[2])).toString();
              if (appConfig.expo.ios) {
                appConfig.expo.ios.buildNumber = buildNumber;
              }
              if (appConfig.expo.android) {
                appConfig.expo.android.versionCode = parseInt(buildNumber);
              }
              fs.writeFileSync('app.json', JSON.stringify(appConfig, null, 2));
              console.log('Updated mobile app version to', '$version', 'with build number', buildNumber);
            "
          fi
          
          # Try to build - start with iOS first as it's more reliable
          echo "Building for preview (iOS first)..."
          if eas build --platform ios --profile preview --non-interactive --no-wait; then
            echo "‚úÖ iOS preview build started successfully"
          else
            echo "‚ö†Ô∏è iOS preview build failed - continuing"
          fi
          
          # Try Android build
          echo "Building for preview (Android)..."
          if eas build --platform android --profile preview --non-interactive --no-wait; then
            echo "‚úÖ Android preview build started successfully"
          else
            echo "‚ö†Ô∏è Android preview build failed - may need keystore setup"
          fi
          
          # Create EAS Update for staging/preview
          echo "Creating EAS Update for preview..."
          eas update --branch preview --message "Staging deployment v${{ github.event.client_payload.version || 'latest' }}" || echo "EAS Update not configured or failed - continuing without update"

  approval-production:
    needs: [deploy-staging, deploy-mobile-staging]
    runs-on: ubuntu-latest
    environment:
      name: production

    steps:
      - name: Wait for Production Approval
        run: |
          echo "‚úÖ Staging deployments completed successfully!"
          echo "   ‚Ä¢ Web application deployed to staging"
          echo "   ‚Ä¢ Mobile app built and published to preview channel"
          echo ""
          echo "‚è≥ Waiting for production deployment approval..."
          if [ -n "${{ github.event.client_payload.version }}" ]; then
            echo "üì¶ Version ready for production: ${{ github.event.client_payload.version }}"
          elif [ -n "${{ github.event.inputs.version }}" ]; then
            echo "üì¶ Version ready for production: ${{ github.event.inputs.version }}"
          fi

  deploy-production:
    needs: approval-production
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.client_payload.tag || github.event.inputs.tag || 'main' }}

      - name: Deploy to Vercel Production
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          vercel-args: '--prod'

  deploy-mobile-production:
    needs: approval-production
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.client_payload.tag || github.event.inputs.tag || 'main' }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Install dependencies
        run: |
          cd mobile-app
          pnpm install

      - name: Setup Expo CLI
        run: npm install -g @expo/cli

      - name: Setup EAS CLI
        run: npm install -g eas-cli

      - name: Authenticate with Expo
        run: |
          cd mobile-app
          expo login --non-interactive
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Build and Submit to App Stores (Production)
        run: |
          cd mobile-app
          echo "üöÄ Building mobile app for production..."
          
          # Update app version to match release
          if [ -n "${{ github.event.client_payload.version }}" ]; then
            version="${{ github.event.client_payload.version }}"
            echo "üì± Setting mobile app version to: $version"
            
            # Update version in app.json/app.config.js
            node -e "
              const fs = require('fs');
              const appConfig = JSON.parse(fs.readFileSync('app.json', 'utf8'));
              appConfig.expo.version = '$version';
              // Increment build number based on version
              const versionParts = '$version'.split('.');
              const buildNumber = (parseInt(versionParts[0]) * 10000 + parseInt(versionParts[1]) * 100 + parseInt(versionParts[2])).toString();
              if (appConfig.expo.ios) {
                appConfig.expo.ios.buildNumber = buildNumber;
              }
              if (appConfig.expo.android) {
                appConfig.expo.android.versionCode = parseInt(buildNumber);
              }
              fs.writeFileSync('app.json', JSON.stringify(appConfig, null, 2));
              console.log('Updated mobile app version to', '$version', 'with build number', buildNumber);
            "
          fi
          
          # Try to build for production - handle failures gracefully  
          echo "Building for production..."
          
          if eas build --platform ios --profile production --auto-submit --non-interactive --no-wait; then
            echo "‚úÖ iOS production build started successfully"
          else
            echo "‚ö†Ô∏è iOS production build failed"
          fi
          
          if eas build --platform android --profile production --auto-submit --non-interactive --no-wait; then
            echo "‚úÖ Android production build started successfully"  
          else
            echo "‚ö†Ô∏è Android production build failed - may need keystore or Play Console setup"
          fi
          
          # Create EAS Update for production
          echo "Creating EAS Update for production..."
          eas update --branch production --message "Production deployment v${{ github.event.client_payload.version || 'latest' }}" || echo "EAS Update not configured or failed - continuing without update"

      - name: Deployment Summary
        run: |
          echo "## üéâ Production Deployment Complete"
          echo ""
          if [ -n "${{ github.event.client_payload.version }}" ]; then
            echo "üì¶ **Version**: ${{ github.event.client_payload.version }}"
            echo "üè∑Ô∏è **Tag**: ${{ github.event.client_payload.tag }}"
            echo "üìù **Changes**: See release notes for ${{ github.event.client_payload.tag }}"
          elif [ -n "${{ github.event.inputs.version }}" ]; then
            echo "üì¶ **Version**: ${{ github.event.inputs.version }}"
            echo "üè∑Ô∏è **Tag**: ${{ github.event.inputs.tag }}"
          else
            echo "üì¶ **Deployed from**: main branch"
          fi
          echo ""
          echo "‚úÖ **Web Staging**: Completed"
          echo "‚úÖ **Mobile Staging**: Completed (Preview build)"
          echo "‚úÖ **Web Production**: Completed"
          echo "‚úÖ **Mobile Production**: Completed (Production build)"
          echo "üåê **Live**: Applications are now live in production"
